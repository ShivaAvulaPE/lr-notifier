body {
    color: rgb(80, 80, 80);
}

input[type="text"] {
    margin-bottom: 15px;
}

ul {
    padding-left: 0;
}

.channel {
    width: 32%;
    display: inline-block;
    vertical-align: top;
}

.notification-input {
    padding: 20px;
    text-align: left;
    width: 280px;
    margin: auto;
    background: #e7e7e7;
}

.button-stack {
    margin-top: 15px;
}

button {
    background: rgb(80, 80, 80);
    color: rgb(200, 200, 200);
    cursor: pointer;
    border: 0;
    padding: 5px 15px;
}

input {
    display: block;
    width: 80%;
}

input {
    border: 1px solid rgb(80, 80, 80);
    height: 22px;
}

li {
    list-style: none;
}

.notification-item {
    padding: 20px;
    text-align: center;
    border: 1px solid rgb(30, 30, 30);
    color: rgb(30, 30, 30);
    border-radius: 4px;
    margin: 5px;
}

.info {
    background: rgba(135, 182, 234, 0.38);
    color: cornflowerblue;
    border-color: cornflowerblue;
}

.warn {
    background: rgba(255, 69, 0, 0.37);
    color: orangered;
    border-color: orangered;
}

.error {
    background: rgba(255, 0, 0, 0.38);
    color: red;
    border-color: red;
}

/*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .notification-item
  class
*/
.notification-item.ng-enter, .notification-item.ng-move {
    -webkit-transition:0.5s linear all;
    -moz-transition:0.5s linear all;
    -o-transition:0.5s linear all;
    transition:0.5s linear all;
    opacity:0;
}

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.notification-item.ng-enter.ng-enter-active,
.notification-item.ng-move.ng-move-active {
    opacity:1;
}

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .notification-item class
*/
.notification-item.ng-leave {
    -webkit-animation:0.5s my_animation;
    -moz-animation:0.5s my_animation;
    -o-animation:0.5s my_animation;
    animation:0.5s my_animation;
}

@keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
}

/*
  Unfortunately each browser vendor requires
  its own definition of keyframe animation code...
*/
@-webkit-keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
}

@-moz-keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
}

@-o-keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
}